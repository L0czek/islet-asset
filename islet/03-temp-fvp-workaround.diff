
project frameworks/base/
diff --git a/services/core/java/com/android/server/SystemServerInitThreadPool.java b/services/core/java/com/android/server/SystemServerInitThreadPool.java
index 63e7563af6d1..fbbb64bca157 100644
--- a/services/core/java/com/android/server/SystemServerInitThreadPool.java
+++ b/services/core/java/com/android/server/SystemServerInitThreadPool.java
@@ -177,8 +177,11 @@ public final class SystemServerInitThreadPool implements Dumpable {
                     copy.addAll(sInstance.mPendingTasks);
                 }
                 t.traceEnd();
-                throw new IllegalStateException("Cannot shutdown. Unstarted tasks "
+                Slog.d(TAG, "[ISLET] Shutdown successful"
+                        +  "Cannot shutdown. Unstarted tasks "
                         + unstartedRunnables + " Unfinished tasks " + copy);
+                //throw new IllegalStateException("Cannot shutdown. Unstarted tasks "
+                //        + unstartedRunnables + " Unfinished tasks " + copy);
             }
             sInstance = null; // Make eligible for GC
             Slog.d(TAG, "Shutdown successful");
diff --git a/services/core/java/com/android/server/SystemServiceManager.java b/services/core/java/com/android/server/SystemServiceManager.java
index 78df983c83f7..425973f2fb35 100644
--- a/services/core/java/com/android/server/SystemServiceManager.java
+++ b/services/core/java/com/android/server/SystemServiceManager.java
@@ -293,10 +293,14 @@ public final class SystemServiceManager implements Dumpable {
                 try {
                     service.onBootPhase(mCurrentPhase);
                 } catch (Exception ex) {
-                    throw new RuntimeException("Failed to boot service "
+                    Slog.i(TAG, "ISLET" + "Failed to boot service "
                             + service.getClass().getName()
                             + ": onBootPhase threw an exception during phase "
-                            + mCurrentPhase, ex);
+                            + mCurrentPhase);
+                    //throw new RuntimeException("Failed to boot service "
+                    //        + service.getClass().getName()
+                    //        + ": onBootPhase threw an exception during phase "
+                    //        + mCurrentPhase, ex);
                 }
                 warnIfTooLong(SystemClock.elapsedRealtime() - time, service, "onBootPhase");
                 t.traceEnd();

project system/netd/
diff --git a/server/TetherController.cpp b/server/TetherController.cpp
index 79193574..80363e0a 100644
--- a/server/TetherController.cpp
+++ b/server/TetherController.cpp
@@ -67,7 +67,7 @@ using android::base::StringPrintf;
 using android::base::unique_fd;
 using android::netdutils::DumpWriter;
 using android::netdutils::ScopedIndent;
-using android::netdutils::statusFromErrno;
+// using android::netdutils::statusFromErrno;
 using android::netdutils::StatusOr;
 
 namespace {
@@ -912,14 +912,19 @@ StatusOr<TetherController::TetherStatsList> TetherController::getTetherStats() {
     for (const IptablesTarget target : {V4, V6}) {
         std::string statsString;
         if (int ret = iptablesRestoreFunction(target, GET_TETHER_STATS_COMMAND, &statsString)) {
-            return statusFromErrno(-ret, StringPrintf("failed to fetch tether stats (%d): %d",
-                                                      target, ret));
+            gLog.log("[ISLET] %s \n", StringPrintf("failed to fetch tether stats (%d): %d",
+                                                      target, ret).c_str());
+            // return statusFromErrno(-ret, StringPrintf("failed to fetch tether stats (%d): %d",
+            //                                           target, ret));
         }
 
         if (int ret = addForwardChainStats(statsList, statsString, parsedIptablesOutput)) {
-            return statusFromErrno(-ret, StringPrintf("failed to parse %s tether stats:\n%s",
+            gLog.log("[ISLET] %s\n", StringPrintf("failed to parse %s tether stats:\n%s",
                                                       target == V4 ? "IPv4": "IPv6",
-                                                      parsedIptablesOutput.c_str()));
+                                                      parsedIptablesOutput.c_str()).c_str());
+            // return statusFromErrno(-ret, StringPrintf("failed to parse %s tether stats:\n%s",
+            //                                           target == V4 ? "IPv4": "IPv6",
+            //                                           parsedIptablesOutput.c_str()));
         }
     }
 
