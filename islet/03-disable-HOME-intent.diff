project frameworks/base/
diff --git a/frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java b/frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
index 13690f30ab3b..b202fb39c0a3 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
@@ -3201,6 +3201,8 @@ public class KeyguardUpdateMonitor implements TrustManager.TrustListener, Dumpab
         if (isUserUnlocked(getCurrentUser())) {
             return false;
         }
+        // ISLET added
+        if (true) { Log.w(TAG, "[ISLET] no HOME INTENT"); return true; }
         Intent homeIntent = new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_HOME);
         ResolveInfo resolveInfo = mContext.getPackageManager().resolveActivityAsUser(homeIntent,
                 0 /* flags */, getCurrentUser());
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/WorkLockActivity.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/WorkLockActivity.java
index 546a4093ec7d..07dcba764657 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/WorkLockActivity.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/WorkLockActivity.java
@@ -201,6 +201,8 @@ public class WorkLockActivity extends Activity {
     }
 
     private void goToHomeScreen() {
+        // ISLET added
+        if (true) return;
         final Intent homeIntent = new Intent(Intent.ACTION_MAIN);
         homeIntent.addCategory(Intent.CATEGORY_HOME);
         homeIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
diff --git a/frameworks/base/services/core/java/com/android/server/SystemServerInitThreadPool.java b/frameworks/base/services/core/java/com/android/server/SystemServerInitThreadPool.java
index 63e7563af6d1..fbbb64bca157 100644
--- a/frameworks/base/services/core/java/com/android/server/SystemServerInitThreadPool.java
+++ b/frameworks/base/services/core/java/com/android/server/SystemServerInitThreadPool.java
@@ -177,8 +177,11 @@ public final class SystemServerInitThreadPool implements Dumpable {
                     copy.addAll(sInstance.mPendingTasks);
                 }
                 t.traceEnd();
-                throw new IllegalStateException("Cannot shutdown. Unstarted tasks "
+                Slog.d(TAG, "[ISLET] Shutdown successful"
+                        +  "Cannot shutdown. Unstarted tasks "
                         + unstartedRunnables + " Unfinished tasks " + copy);
+                //throw new IllegalStateException("Cannot shutdown. Unstarted tasks "
+                //        + unstartedRunnables + " Unfinished tasks " + copy);
             }
             sInstance = null; // Make eligible for GC
             Slog.d(TAG, "Shutdown successful");
diff --git a/frameworks/base/services/core/java/com/android/server/SystemServiceManager.java b/frameworks/base/services/core/java/com/android/server/SystemServiceManager.java
index 78df983c83f7..425973f2fb35 100644
--- a/frameworks/base/services/core/java/com/android/server/SystemServiceManager.java
+++ b/frameworks/base/services/core/java/com/android/server/SystemServiceManager.java
@@ -293,10 +293,14 @@ public final class SystemServiceManager implements Dumpable {
                 try {
                     service.onBootPhase(mCurrentPhase);
                 } catch (Exception ex) {
-                    throw new RuntimeException("Failed to boot service "
+                    Slog.i(TAG, "ISLET" + "Failed to boot service "
                             + service.getClass().getName()
                             + ": onBootPhase threw an exception during phase "
-                            + mCurrentPhase, ex);
+                            + mCurrentPhase);
+                    //throw new RuntimeException("Failed to boot service "
+                    //        + service.getClass().getName()
+                    //        + ": onBootPhase threw an exception during phase "
+                    //        + mCurrentPhase, ex);
                 }
                 warnIfTooLong(SystemClock.elapsedRealtime() - time, service, "onBootPhase");
                 t.traceEnd();
diff --git a/frameworks/base/services/core/java/com/android/server/UiModeManagerService.java b/frameworks/base/services/core/java/com/android/server/UiModeManagerService.java
index c853ba93f4ab..af101035f041 100644
--- a/frameworks/base/services/core/java/com/android/server/UiModeManagerService.java
+++ b/frameworks/base/services/core/java/com/android/server/UiModeManagerService.java
@@ -1728,7 +1728,9 @@ final class UiModeManagerService extends SystemService {
                         + mDockState +", category=" + category);
             }
 
-            sendConfigurationAndStartDreamOrDockAppLocked(category);
+            // ISLET disabled
+            Slog.w(TAG, "[ISLET] UiModeManagerService.jav:aupdateLocked() no HOME intent");
+            //sendConfigurationAndStartDreamOrDockAppLocked(category);
         }
 
         // keep screen on when charging and in car mode
diff --git a/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java b/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
index aa154292fe7e..924ff0edb4fb 100644
--- a/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
+++ b/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
@@ -4977,9 +4977,11 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
         Intent intent = new Intent(mTopAction, mTopData != null ? Uri.parse(mTopData) : null);
         intent.setComponent(mTopComponent);
         intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);
-        if (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
-            intent.addCategory(Intent.CATEGORY_HOME);
-        }
+        // ISLET added
+        Slog.w(TAG, "[ISLET] getHomeIntent() omit CATEGORY_HOME");
+        //if (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
+        //    intent.addCategory(Intent.CATEGORY_HOME);
+        //}
         return intent;
     }
 
@@ -5872,6 +5874,8 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
 
         @Override
         public boolean startHomeActivity(int userId, String reason) {
+            // ISLET dislabled
+            if (true) { Slog.w(TAG, "[ISLET] disable startHomeActivity"); return true;}
             synchronized (mGlobalLock) {
                 return mRootWindowContainer.startHomeOnDisplay(userId, reason, DEFAULT_DISPLAY);
             }
@@ -5880,6 +5884,8 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
         @Override
         public boolean startHomeOnDisplay(int userId, String reason, int displayId,
                 boolean allowInstrumenting, boolean fromHomeKey) {
+            // ISLET dislabled
+            if (true) { Slog.w(TAG, "[ISLET] disable startHomeOnDisplay"); return true;}
             synchronized (mGlobalLock) {
                 return mRootWindowContainer.startHomeOnDisplay(userId, reason, displayId,
                         allowInstrumenting, fromHomeKey);
@@ -5888,6 +5894,8 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
 
         @Override
         public boolean startHomeOnAllDisplays(int userId, String reason) {
+            // ISLET dislabled
+            if (true) { Slog.w(TAG, "[ISLET] disable startHomeOnAllDisplays"); return true;}
             synchronized (mGlobalLock) {
                 return mRootWindowContainer.startHomeOnAllDisplays(userId, reason);
             }
